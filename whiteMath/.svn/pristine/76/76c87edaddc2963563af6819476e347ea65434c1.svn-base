using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using whiteMath.General;

namespace whiteMath.Statistics
{
    public static class StatisticExtensionMethods
    {
        /// <summary>
        /// Calculates the sample average for a sequence of observations.
        /// </summary>
        /// <typeparam name="T">The type of observations' values.</typeparam>
        /// <typeparam name="C">A calculator for the <typeparamref name="T"/> type.</typeparam>
        /// <param name="values">The sequence of observations.</param>
        /// <returns>The sample average for the sequence of observations passed.</returns>
        public static T SampleAverage<T, C>(this IEnumerable<T> values) where C : ICalc<T>, new()
        {
            int count = values.Count();

            if (count == 0)
                throw new ArgumentException("Cannot calculate the sample average value for an empty sequence.");

            Numeric<T, C> sum = Numeric<T, C>.Zero;

            foreach (T value in values)
                sum += value;

            return sum / (Numeric<T,C>)values.Count();
        }

        /// <summary>
        /// TODO
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="C"></typeparam>
        /// <param name="values"></param>
        /// <param name="comparer"></param>
        /// <returns></returns>
        public static T SampleMedian<T, C>(this IEnumerable<T> values, IComparer<T> comparer = null) where C : ICalc<T>, new()
        {
            if(values.Count() == 0)
                throw new ArgumentException("Cannot evaluate the sample median value for an empty sequence.");

            T[] arr = values.ToArray();

            arr.SortShell(comparer);

            if (arr.Length % 2 == 0)
                return ((Numeric<T, C>)arr[(arr.Length - 1) / 2] + arr[arr.Length / 2]) / (Numeric<T, C>._2);
            else
                return (arr[arr.Length / 2]);
        }

        /// <summary>
        /// Returns the runs test series count for a sequence of observations.
        /// The sample median for that sequence must first be calculated.
        /// </summary>
        /// <typeparam name="T">The type of observations' values.</typeparam>
        /// <typeparam name="C">The calculator for the <typeparamref name="T"/> type.</typeparam>
        /// <param name="values">The list of observations.</param>
        /// <param name="sampleMedian">The sample median of the observations' sequence.</param>
        /// <returns>The amount of series for the runs test.</returns>
        public static int RunsTest_SeriesCount<T, C>(this IEnumerable<T> values, T sampleMedian) where C : ICalc<T>, new()
        {
            int count = values.Count();

            if (count == 0)
                throw new ArgumentException("Cannot return the series count for an empty sequence.");
            else if (count == 1)
                return 0;

            int signChanges = 0;

            IEnumerator<T> enumerator = values.GetEnumerator();
            ICalc<T> calc = Numeric<T,C>.Calculator;

            enumerator.MoveNext();

            // доходим до первого значения, не равного медиане.

            while (calc.eqv(enumerator.Current, sampleMedian))
                if (enumerator.MoveNext() == false)
                    return 0;

            bool isPlus = calc.mor(enumerator.Current, sampleMedian);

            while (enumerator.MoveNext())
            {
                if (!isPlus && calc.mor(enumerator.Current, sampleMedian))
                {
                    signChanges++;
                    isPlus = true;
                }
                else if (isPlus && calc.mor(sampleMedian, enumerator.Current))
                {
                    signChanges++;
                    isPlus = false;
                }
            }

            return signChanges + 1;
        }

        /// <summary>
        /// Calculates the sample unbiased variation for a sequence of observations. 
        /// </summary>
        /// <typeparam name="T">The type of observations' values.</typeparam>
        /// <typeparam name="C">A calculator for the <typeparamref name="T"/> type.</typeparam>
        /// <param name="values">The sequence of observations.</param>
        /// <param name="sampleAverage">The sample average for the observations sequence.</param>
        /// <returns>The sample unbiased variation for the sequence of observations.</returns>
        public static T SampleUnbiasedVariance<T, C>(this IEnumerable<T> values, T sampleAverage) where C : ICalc<T>, new()
        {
            int count = values.Count();

            if (count == 0)
                throw new ArgumentException("Cannot calculate the sample variance for an empty sequence.");
            else if (count == 1)
                return Numeric<T, C>.Zero;

            Numeric<T, C> sum = Numeric<T, C>.Zero;
            ICalc<T> calc = Numeric<T, C>.Calculator;

            foreach (T value in values)
                sum += WhiteMath<T, C>.PowerInteger(calc.dif(value, sampleAverage), 2);

            return sum / (Numeric<T, C>)(values.Count()-1);
        }

        /// <summary>
        /// Calculates the sample biased variation for a sequence of observations. 
        /// </summary>
        /// <typeparam name="T">The type of observations' values.</typeparam>
        /// <typeparam name="C">A calculator for the <typeparamref name="T"/> type.</typeparam>
        /// <param name="values">The sequence of observations.</param>
        /// <param name="sampleAverage">The sample average for the observations sequence.</param>
        /// <returns>The sample biased variation for the sequence of observations.</returns>
        public static T SampleVariance<T, C>(this IEnumerable<T> values, T sampleAverage) where C : ICalc<T>, new()
        {
            return SampleUnbiasedVariance<T, C>(values, sampleAverage) * (Numeric<T,C>)(values.Count() - 1) / (Numeric<T,C>)(values.Count());
        }
    }
}
